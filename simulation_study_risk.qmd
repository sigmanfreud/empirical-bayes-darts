---
title: "simulation_study_risk"
format: html
editor: visual
---

## Simulation Study

### My estimator

Compute our EB estimator along with the corresponding true values of $\sigma_i.$

```{r}

library(MASS)
library(stats4)
library(pracma)  # for trapz()

# Dartboard region classifier
get_dartboard_region_vectorized <- function(x, y) {
  segment_numbers <- c(20, 1, 18, 4, 13, 6, 10, 15, 2, 17,
                       3, 19, 7, 16, 8, 11, 14, 9, 12, 5)
  segment_width <- 360 / 20

  bull_inner <- 6.35
  bull_outer <- 15.9
  triple_inner <- 99
  triple_outer <- 107
  double_inner <- 162
  double_outer <- 170

  r <- sqrt(x^2 + y^2)
  theta <- (90 - atan2(y, x) * 180 / pi) %% 360
  segment_idx <- floor(theta / segment_width) + 1
  segment <- segment_numbers[segment_idx]

  region <- character(length(x))
  region[r <= bull_inner] <- "Bull"
  region[r > bull_inner & r <= bull_outer] <- "Outer Bull"
  region[r > bull_outer & r <= triple_inner] <- paste0("S", segment[r > bull_outer & r <= triple_inner])
  region[r > triple_inner & r <= triple_outer] <- paste0("T", segment[r > triple_inner & r <= triple_outer])
  region[r > triple_outer & r <= double_inner] <- paste0("S", segment[r > triple_outer & r <= double_inner])
  region[r > double_inner & r <= double_outer] <- paste0("D", segment[r > double_inner & r <= double_outer])
  region[r > double_outer] <- "Miss"

  return(region)
}

# Expand region table to include all possible regions
expand_region_table <- function(region_table) {
  all_regions <- c(
    "Bull", "Outer Bull",
    paste0("S", 1:20),
    paste0("T", 1:20),
    paste0("D", 1:20),
    "Miss"
  )
  full_table <- setNames(rep(0, length(all_regions)), all_regions)
  matching_regions <- intersect(names(region_table), names(full_table))
  full_table[matching_regions] <- region_table[matching_regions]
  return(full_table)
}

# Convert region counts into annuli counts
convert_regions_to_annuli <- function(region_counts) {
  annuli_counts <- rep(0, 6)

  for (region in names(region_counts)) {
    count <- region_counts[[region]]

    if (region == "Bull") {
      annuli_counts[1] <- annuli_counts[1] + count
    } else if (region == "Outer Bull") {
      annuli_counts[2] <- annuli_counts[2] + count
    } else if (startsWith(region, "T")) {
      annuli_counts[4] <- annuli_counts[4] + count
    } else if (startsWith(region, "D")) {
      annuli_counts[6] <- annuli_counts[6] + count
    } else if (startsWith(region, "S")) {
      annuli_counts[3] <- annuli_counts[3] + count
    }
  }
  return(annuli_counts)
}

# Inverse-Chi-Squared density
dinvchisq <- function(theta, a, b) {
  if (theta <= 0) return(0)
  (b/2)^(a/2) / gamma(a/2) * theta^(-a/2 - 1) * exp(-b / (2*theta))
}

# Exact annulus probability
dart_annulus_probability <- function(r1, r2, sigma2) {
  pchisq(r2^2 / sigma2, df = 2) - pchisq(r1^2 / sigma2, df = 2)
}

# Log-likelihood for a fixed sigma^2
log_likelihood_bull_given_sigma <- function(sigma2, observed_counts, radii = c(0, 6.35, 15.9, 99, 107, 162, 170)) {
  log_likelihood <- 0

  for (i in seq_along(observed_counts)) {
    n_obs <- observed_counts[i]
    if (n_obs == 0) next

    prob_annulus <- dart_annulus_probability(radii[i], radii[i+1], sigma2)
    prob_annulus <- max(prob_annulus, 1e-12)

    log_likelihood <- log_likelihood + n_obs * log(prob_annulus)
  }

  return(log_likelihood)
}

# Log-likelihood for a given (a,b)
log_likelihood_bull_ab <- function(a, b, observed_counts, radii, n_theta_samples = 5000) {
  if (a <= 0 || b <= 0) return(-Inf)
  theta_samples <- b / rchisq(n_theta_samples, df = a)
  logL_total <- 0

  for (i in seq_along(observed_counts)) {
    n_obs <- observed_counts[i]
    if (n_obs == 0) next

    probs <- dart_annulus_probability(radii[i], radii[i+1], theta_samples)
    avg_prob <- mean(probs)
    avg_prob <- max(avg_prob, 1e-12)

    logL_total <- logL_total + n_obs * log(avg_prob)
  }
  return(logL_total)
}

# Wrapper to perform entire EB estimation
estimate_sigmas <- function(player_count_list) {
  bull_radii <- c(0, 6.35, 15.9, 99, 107, 162, 170)

  # Overall counts
  overall_counts <- Reduce("+", player_count_list)
  overall_annuli <- convert_regions_to_annuli(overall_counts)

  # Step 1: Fit prior (MLE for a,b)
  mle_bull_ab <- function(observed_counts, radii = bull_radii) {
    neg_log_likelihood <- function(a, b) {
      -log_likelihood_bull_ab(a, b, observed_counts, radii)
    }
    mle_result <- mle(neg_log_likelihood, start = list(a = 5, b = 1000), method = "L-BFGS-B", lower = c(0.1, 0.1))
    return(mle_result)
  }

  set.seed(123)
  mle_result <- mle_bull_ab(overall_annuli)
  mle_a <- coef(mle_result)["a"]
  mle_b <- coef(mle_result)["b"]

  # Step 2: For each player, compute MAP estimate
  sigma2_map_list <- c()

  for (player_counts in player_count_list) {
    observed_counts_bull <- convert_regions_to_annuli(player_counts)

    sigma_vals <- seq(2, 25, length.out = 100)
    sigma2_vals <- sigma_vals^2

    log_likelihood_vals <- sapply(sigma2_vals, function(s2) {
      log_likelihood_bull_given_sigma(s2, observed_counts_bull, bull_radii)
    }, USE.NAMES = FALSE)

    likelihood_vals <- exp(log_likelihood_vals)
    prior_vals <- sapply(sigma2_vals, function(theta) {
      dinvchisq(theta, mle_a, mle_b)
    })

    unnormalized_posterior <- likelihood_vals * prior_vals
    normalized_posterior <- unnormalized_posterior / trapz(sigma2_vals, unnormalized_posterior)

    idx_max <- which.max(normalized_posterior)
    sigma2_map <- sigma2_vals[idx_max]
    sigma2_map_list <- c(sigma2_map_list, sigma2_map)
  }

  return(sigma2_map_list)
}

# Simulation function to estimate risk
simulate_estimation_risk <- function(n_trials = 100, n_players = 5, throws_per_player = 15, a = 5, b = 934) {
  risk_values <- c()

  for (trial in 1:n_trials) {
    sigma2_true <- b / rchisq(n_players, df = a)
    player_counts <- list()

    for (i in 1:n_players) {
      sigma <- sqrt(sigma2_true[i])
      sigma <- max(sigma, 0.5)
      samples <- mvrnorm(n = throws_per_player, mu = c(0, 0), Sigma = diag(sigma^2, 2))
      regions <- get_dartboard_region_vectorized(samples[,1], samples[,2])
      player_counts[[i]] <- expand_region_table(table(regions))
    }

    sigma2_est <- estimate_sigmas(player_counts)
    risk <- mean((sigma2_est - sigma2_true)^2)
    risk_values <- c(risk_values, risk)
  }

  return(risk_values)
}



```

Now, we test it.

```{r}
risk_vals <- simulate_estimation_risk(n_trials = 100)
hist(risk_vals)
mean(risk_vals)

```

```{r}
# Remove extreme outliers
threshold <- quantile(risk_vals, 0.99)  # 99th percentile cutoff
filtered_risk_vals <- risk_vals[risk_vals <= threshold]

# Plot histogram
hist(filtered_risk_vals, 
     breaks = 60,    # Smaller bins
     col = "red",    # Red bars
     border = "white",
     probability = TRUE,
     main = "Distribution of Risk",
     xlab = "Risk (MSE)")

# Add density curve
lines(density(filtered_risk_vals), col = "darkblue", lwd = 2)

# Add mean line
abline(v = mean(filtered_risk_vals), col = "black", lty = 2, lwd = 2)

# Add legend
legend("topright", 
       legend = sprintf("Mean Risk = %.2f", mean(filtered_risk_vals)),
       col = "black", lty = 2, bty = "n")

```

Next, we consider the case where $G$ is incorrectly specified.

```{r}
library(MASS)
library(stats4)
library(pracma)  # for trapz()

# Dartboard region classifier
get_dartboard_region_vectorized <- function(x, y) {
  segment_numbers <- c(20, 1, 18, 4, 13, 6, 10, 15, 2, 17,
                       3, 19, 7, 16, 8, 11, 14, 9, 12, 5)
  segment_width <- 360 / 20

  bull_inner <- 6.35
  bull_outer <- 15.9
  triple_inner <- 99
  triple_outer <- 107
  double_inner <- 162
  double_outer <- 170

  r <- sqrt(x^2 + y^2)
  theta <- (90 - atan2(y, x) * 180 / pi) %% 360
  segment_idx <- floor(theta / segment_width) + 1
  segment <- segment_numbers[segment_idx]

  region <- character(length(x))
  region[r <= bull_inner] <- "Bull"
  region[r > bull_inner & r <= bull_outer] <- "Outer Bull"
  region[r > bull_outer & r <= triple_inner] <- paste0("S", segment[r > bull_outer & r <= triple_inner])
  region[r > triple_inner & r <= triple_outer] <- paste0("T", segment[r > triple_inner & r <= triple_outer])
  region[r > triple_outer & r <= double_inner] <- paste0("S", segment[r > triple_outer & r <= double_inner])
  region[r > double_inner & r <= double_outer] <- paste0("D", segment[r > double_inner & r <= double_outer])
  region[r > double_outer] <- "Miss"

  return(region)
}

# Expand region table to include all possible regions
expand_region_table <- function(region_table) {
  all_regions <- c(
    "Bull", "Outer Bull",
    paste0("S", 1:20),
    paste0("T", 1:20),
    paste0("D", 1:20),
    "Miss"
  )
  full_table <- setNames(rep(0, length(all_regions)), all_regions)
  matching_regions <- intersect(names(region_table), names(full_table))
  full_table[matching_regions] <- region_table[matching_regions]
  return(full_table)
}

# Convert region counts into annuli counts
convert_regions_to_annuli <- function(region_counts) {
  annuli_counts <- rep(0, 6)

  for (region in names(region_counts)) {
    count <- region_counts[[region]]

    if (region == "Bull") {
      annuli_counts[1] <- annuli_counts[1] + count
    } else if (region == "Outer Bull") {
      annuli_counts[2] <- annuli_counts[2] + count
    } else if (startsWith(region, "T")) {
      annuli_counts[4] <- annuli_counts[4] + count
    } else if (startsWith(region, "D")) {
      annuli_counts[6] <- annuli_counts[6] + count
    } else if (startsWith(region, "S")) {
      annuli_counts[3] <- annuli_counts[3] + count
    }
  }
  return(annuli_counts)
}

# Exact annulus probability
dart_annulus_probability <- function(r1, r2, sigma2) {
  pchisq(r2^2 / sigma2, df = 2) - pchisq(r1^2 / sigma2, df = 2)
}

# Log-likelihood for a fixed sigma^2
log_likelihood_bull_given_sigma <- function(sigma2, observed_counts, radii = c(0, 6.35, 15.9, 99, 107, 162, 170)) {
  log_likelihood <- 0

  for (i in seq_along(observed_counts)) {
    n_obs <- observed_counts[i]
    if (n_obs == 0) next

    prob_annulus <- dart_annulus_probability(radii[i], radii[i+1], sigma2)
    prob_annulus <- max(prob_annulus, 1e-12)

    log_likelihood <- log_likelihood + n_obs * log(prob_annulus)
  }

  return(log_likelihood)
}

# Wrapper to perform EB estimation (now assuming wrong prior model)
estimate_sigmas_lognormal_prior <- function(player_count_list) {
  bull_radii <- c(0, 6.35, 15.9, 99, 107, 162, 170)

  # Assume fixed LogNormal prior: meanlog = 5, sdlog = 0.5
  prior_meanlog <- 5
  prior_sdlog <- 0.5

  sigma2_map_list <- c()

  for (player_counts in player_count_list) {
    observed_counts_bull <- convert_regions_to_annuli(player_counts)

    sigma_vals <- seq(2, 25, length.out = 100)
    sigma2_vals <- sigma_vals^2

    log_likelihood_vals <- sapply(sigma2_vals, function(s2) {
      log_likelihood_bull_given_sigma(s2, observed_counts_bull, bull_radii)
    }, USE.NAMES = FALSE)

    likelihood_vals <- exp(log_likelihood_vals)
    prior_vals <- dlnorm(sigma2_vals, meanlog = prior_meanlog, sdlog = prior_sdlog)

    unnormalized_posterior <- likelihood_vals * prior_vals
    normalized_posterior <- unnormalized_posterior / trapz(sigma2_vals, unnormalized_posterior)

    idx_max <- which.max(normalized_posterior)
    sigma2_map <- sigma2_vals[idx_max]
    sigma2_map_list <- c(sigma2_map_list, sigma2_map)
  }

  return(sigma2_map_list)
}

# Simulation function to estimate risk under model misspecification
simulate_estimation_risk_misspecified <- function(n_trials = 100, n_players = 5, throws_per_player = 15) {
  risk_values <- c()

  for (trial in 1:n_trials) {
    sigma2_true <- rlnorm(n_players, meanlog = 5, sdlog = 0.5)
    player_counts <- list()

    for (i in 1:n_players) {
      sigma <- sqrt(sigma2_true[i])
      samples <- mvrnorm(n = throws_per_player, mu = c(0, 0), Sigma = diag(sigma^2, 2))
      regions <- get_dartboard_region_vectorized(samples[,1], samples[,2])
      player_counts[[i]] <- expand_region_table(table(regions))
    }

    sigma2_est <- estimate_sigmas_lognormal_prior(player_counts)
    risk <- mean((sigma2_est - sigma2_true)^2)
    risk_values <- c(risk_values, risk)
  }

  return(risk_values)
}
```

Now, we test it.

```{r}
risk_vals_wrong <- simulate_estimation_risk_misspecified(n_trials = 100)
risk_vals_wrong
```

Now, we plot some heuristics.

```{r}
# Remove extreme outliers
threshold <- quantile(risk_vals_wrong, 0.99)  # 99th percentile cutoff
filtered_risk_vals_wrong <- risk_vals_wrong[risk_vals_wrong <= threshold]

# Plot histogram
hist(filtered_risk_vals_wrong, 
     breaks = 60,    # Smaller bins
     col = "red",    # Red bars
     border = "white",
     probability = TRUE,
     main = "Distribution of Risk",
     xlab = "Risk (MSE)")

# Add density curve
lines(density(filtered_risk_vals_wrong), col = "darkblue", lwd = 2)

# Add mean line
abline(v = mean(filtered_risk_vals_wrong), col = "black", lty = 2, lwd = 2)

# Add legend
legend("topright", 
       legend = sprintf("Mean Risk = %.2f", mean(filtered_risk_vals_wrong)),
       col = "black", lty = 2, bty = "n")

```

### Haugh and Wang Estimator

```{r}
library(MASS)
library(stats4)
library(pracma)

# Dartboard setup
bull_radii <- c(0, 6.35, 15.9, 99, 107, 162, 170)

# Helper to expand region table
to_annuli_counts <- function(region_counts) {
  annuli_counts <- rep(0, 6)
  for (region in names(region_counts)) {
    count <- region_counts[[region]]
    if (region == "Bull") {
      annuli_counts[1] <- annuli_counts[1] + count
    } else if (region == "Outer Bull") {
      annuli_counts[2] <- annuli_counts[2] + count
    } else if (startsWith(region, "T")) {
      annuli_counts[4] <- annuli_counts[4] + count
    } else if (startsWith(region, "D")) {
      annuli_counts[6] <- annuli_counts[6] + count
    } else if (startsWith(region, "S")) {
      annuli_counts[3] <- annuli_counts[3] + count
    }
  }
  return(annuli_counts)
}

# Exact annulus probability
dart_annulus_probability <- function(r1, r2, sigma2) {
  pchisq(r2^2 / sigma2, df = 2) - pchisq(r1^2 / sigma2, df = 2)
}

# Log-likelihood for (alpha) estimation
log_likelihood_alpha <- function(alpha, observed_counts) {
  if (any(alpha <= 0)) return(-Inf)
  total_counts <- sum(observed_counts)
  sum(lgamma(alpha + observed_counts) - lgamma(alpha)) + lgamma(sum(alpha)) - lgamma(sum(alpha) + total_counts)
}

# Log-likelihood for fixed sigma2
log_likelihood_given_sigma <- function(sigma2, observed_counts, radii = bull_radii) {
  log_likelihood <- 0
  for (i in seq_along(observed_counts)) {
    n_obs <- observed_counts[i]
    if (n_obs == 0) next
    prob_annulus <- dart_annulus_probability(radii[i], radii[i+1], sigma2)
    prob_annulus <- max(prob_annulus, 1e-12)
    log_likelihood <- log_likelihood + n_obs * log(prob_annulus)
  }
  return(log_likelihood)
}

# Estimate alpha via marginal MLE
estimate_alpha <- function(all_annuli_counts) {
  mle_result <- mle(function(alpha) -log_likelihood_alpha(rep(alpha, 6), all_annuli_counts), 
                    start = list(alpha = 1), method = "L-BFGS-B", lower = 0.01)
  coef(mle_result)["alpha"]
}

# Main function to fit pseudo-count based estimator
estimate_sigma_pseudo <- function(player_annuli_list) {
  # Step 1: Pool all players' data to fit alpha
  all_counts <- Reduce("+", player_annuli_list)
  hat_alpha <- estimate_alpha(all_counts)

  sigma2_map_list <- c()

  for (counts in player_annuli_list) {
    pseudo_counts <- counts + hat_alpha

    sigma_vals <- seq(2, 25, length.out = 100)
    sigma2_vals <- sigma_vals^2

    log_likelihood_vals <- sapply(sigma2_vals, function(s2) {
      log_likelihood_given_sigma(s2, pseudo_counts)
    }, USE.NAMES = FALSE)

    likelihood_vals <- exp(log_likelihood_vals)
    idx_max <- which.max(likelihood_vals)
    sigma2_map <- sigma2_vals[idx_max]

    sigma2_map_list <- c(sigma2_map_list, sigma2_map)
  }

  return(sigma2_map_list)
}

# Example Simulation Data
set.seed(123)
n_players <- 5
throws_per_player <- 15

# True sigma2 from LogNormal prior
sigma2_true <- rlnorm(n_players, meanlog = 5, sdlog = 0.5)
sigma_true <- sqrt(sigma2_true)

# Simulate dart throws
get_dartboard_region_vectorized <- function(x, y) {
  segment_numbers <- c(20, 1, 18, 4, 13, 6, 10, 15, 2, 17,
                       3, 19, 7, 16, 8, 11, 14, 9, 12, 5)
  segment_width <- 360 / 20
  bull_inner <- 6.35
  bull_outer <- 15.9
  triple_inner <- 99
  triple_outer <- 107
  double_inner <- 162
  double_outer <- 170

  r <- sqrt(x^2 + y^2)
  theta <- (90 - atan2(y, x) * 180 / pi) %% 360
  segment_idx <- floor(theta / segment_width) + 1
  segment <- segment_numbers[segment_idx]

  region <- character(length(x))
  region[r <= bull_inner] <- "Bull"
  region[r > bull_inner & r <= bull_outer] <- "Outer Bull"
  region[r > bull_outer & r <= triple_inner] <- paste0("S", segment[r > bull_outer & r <= triple_inner])
  region[r > triple_inner & r <= triple_outer] <- paste0("T", segment[r > triple_inner & r <= triple_outer])
  region[r > triple_outer & r <= double_inner] <- paste0("S", segment[r > triple_outer & r <= double_inner])
  region[r > double_inner & r <= double_outer] <- paste0("D", segment[r > double_inner & r <= double_outer])
  region[r > double_outer] <- "Miss"

  return(region)
}

# Generate sample data
player_counts <- list()
for (i in 1:n_players) {
  samples <- MASS::mvrnorm(throws_per_player, mu = c(0, 0), Sigma = diag(sigma_true[i]^2, 2))
  regions <- get_dartboard_region_vectorized(samples[,1], samples[,2])
  player_counts[[i]] <- table(regions)
}

# Convert to annuli counts
player_annuli_list <- lapply(player_counts, to_annuli_counts)

# Estimate using pseudo-counts
sigma2_est_pseudo <- estimate_sigma_pseudo(player_annuli_list)

# Output true vs estimated
cat("True sigma2 values:\n")
print(sigma2_true)

cat("Estimated sigma2 values (pseudo-count based):\n")
print(sigma2_est_pseudo)

```

Now, we do the simulation in the correctly specified (first) case.

```{r}

simulate_risk_pseudocount_invchisq <- function(n_trials = 100, n_players = 5, throws_per_player = 15) {
  bull_radii <- c(0, 6.35, 15.9, 99, 107, 162, 170)

  all_risks <- c()

  for (trial in 1:n_trials) {
    # Step 1: Simulate true sigma^2 from Inverse-Chi-Squared(5, 934)
    a <- 5
    b <- 934
    sigma2_true <- b / rchisq(n_players, df = a)
    sigma_true <- sqrt(sigma2_true)

    # Step 2: Simulate dart throws
    player_counts <- list()
    for (i in 1:n_players) {
      samples <- MASS::mvrnorm(throws_per_player, mu = c(0, 0), Sigma = diag(sigma_true[i]^2, 2))
      regions <- get_dartboard_region_vectorized(samples[,1], samples[,2])
      player_counts[[i]] <- table(regions)
    }

    # Step 3: Convert to annuli counts
    player_annuli_list <- lapply(player_counts, to_annuli_counts)

    # Step 4: Estimate using pseudo-count method
    sigma2_est <- estimate_sigma_pseudo(player_annuli_list)

    # Step 5: Compute risk (mean squared error)
    risk <- mean((sigma2_est - sigma2_true)^2)
    all_risks <- c(all_risks, risk)
  }

  return(all_risks)
}

```

```{r}
# --- Run the simulation ---
set.seed(42)
risk_vals_pseudocount <- simulate_risk_pseudocount_invchisq(n_trials = 100)

# Plot
hist(risk_vals_pseudocount, col = "red", breaks = 60,
     main = "Risk Distribution: Pseudo-Count Estimator",
     xlab = "Risk (Mean Squared Error)", probability = TRUE)
lines(density(risk_vals_pseudocount), col = "blue", lwd = 2)
abline(v = mean(risk_vals_pseudocount), col = "black", lty = 2, lwd = 2)
legend("topright", legend = sprintf("Mean Risk = %.2f", mean(risk_vals_pseudocount)),
       col = "black", lty = 2, bty = "n")

```

Now, we run in for the second case.

```{r}
simulate_risk_pseudocount_lognormal <- function(n_trials = 100, n_players = 5, throws_per_player = 15) {
  bull_radii <- c(0, 6.35, 15.9, 99, 107, 162, 170)

  all_risks <- c()

  for (trial in 1:n_trials) {
    # Step 1: Simulate true sigma^2 from LogNormal(meanlog = 5, sdlog = 0.5)
    meanlog <- 5
    sdlog <- 0.5
    sigma2_true <- rlnorm(n_players, meanlog = meanlog, sdlog = sdlog)
    sigma_true <- sqrt(sigma2_true)

    # Step 2: Simulate dart throws
    player_counts <- list()
    for (i in 1:n_players) {
      samples <- MASS::mvrnorm(throws_per_player, mu = c(0, 0), Sigma = diag(sigma_true[i]^2, 2))
      regions <- get_dartboard_region_vectorized(samples[,1], samples[,2])
      player_counts[[i]] <- table(regions)
    }

    # Step 3: Convert to annuli counts
    player_annuli_list <- lapply(player_counts, to_annuli_counts)

    # Step 4: Estimate using pseudo-count method
    sigma2_est <- estimate_sigma_pseudo(player_annuli_list)

    # Step 5: Compute risk (mean squared error)
    risk <- mean((sigma2_est - sigma2_true)^2)
    all_risks <- c(all_risks, risk)
  }

  return(all_risks)
}

```

Now, we test it.

```{r}
set.seed(42)
risk_vals_pseudocount_lognormal <- simulate_risk_pseudocount_lognormal(n_trials = 100)

# Plot
hist(risk_vals_pseudocount_lognormal, col = "red", breaks = 60,
     main = "Risk Distribution: Pseudo-Count Estimator)",
     xlab = "Risk (Mean Squared Error)", probability = TRUE)
lines(density(risk_vals_pseudocount_lognormal), col = "blue", lwd = 2)
abline(v = mean(risk_vals_pseudocount_lognormal), col = "black", lty = 2, lwd = 2)
legend("topright", legend = sprintf("Mean Risk = %.2f", mean(risk_vals_pseudocount_lognormal)),
       col = "black", lty = 2, bty = "n")
```
